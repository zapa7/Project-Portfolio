### Implementation of the Needleman-Wunsch Global Pairwise Alignment algorithm ###

# This function creates an initial table with x-axis being the length of one sequence and y-axis being the length of another sequence. Then it fills in the table according to the Needleman-Wunsch Global Pairwise Alignment algorithm.

def buildTable(X, Y, match=1, mismatch=-1, gap=-1):
    print("Sequence 1:", X)
    print("Sequence 2:", Y)
    opt = []
    for i in range(len(X)+1):
      row = []
      for j in range(len(Y)+1):
        row.append(0)
      opt.append(row)
      
    ## initialize first column
    for rowid in range(0, len(opt)):
        opt[rowid][0] = -1* rowid

    ## initialize first row
    for colid in range(0, len(opt[0])):
        opt[0][colid] = -1* colid

    ## print the intital table
    print('The initial alignment table is:')
    for each in opt:
      print(each)

    ## Creating the final table
    for rowid in range(1, len(opt)):
      for colid in range(1, len(opt[0])):
        score1 = opt[rowid][colid-1] + gap
        score2 = opt[rowid-1][colid] + gap
        score3 = opt[rowid-1][colid-1]
        if X[rowid-1] == Y[colid-1]:
          score3 += match
        else:
          score3 += mismatch
        best_score = max(score1, score2, score3)
        opt[rowid][colid] = best_score

    ## printing the final table    
    print('The final alignment table is:')
    for each in opt:
      print(each)

    return 
    
buildTable('ACGTAC', 'AGTCGAC', match=2, mismatch=-1, gap=-1)
